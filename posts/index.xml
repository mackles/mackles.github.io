<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on /home/mackle/emporium</title><link>https://mackle.io/posts/</link><description>Recent content in Posts on /home/mackle/emporium</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Stuart Mackle</copyright><lastBuildDate>Thu, 25 Mar 2021 19:59:58 +0000</lastBuildDate><atom:link href="https://mackle.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Distributed Processing: Bipartite Optimizations and POLE</title><link>https://mackle.io/posts/distributed-processing-bipartite-optimizaitons-and-pole/</link><pubDate>Thu, 25 Mar 2021 19:59:58 +0000</pubDate><guid>https://mackle.io/posts/distributed-processing-bipartite-optimizaitons-and-pole/</guid><description>Introduction On the first post on graph colouring I touched on bipartite graphs and how we can efficiently colour them with only two colours. This will underpin one of the optimizations we can make on the solution, which currently is only an implementation of the greedy algorithm.
If you haven&amp;rsquo;t read the first part I&amp;rsquo;d recommend doing so here.
Bipartite Graphs Bipartite graphs are a subset of graphs where all vertices can be split into one of two subgraphs such that no two vertices in the same subgraph share an edge.</description></item><item><title>Distributed Processing: Graph Colouring</title><link>https://mackle.io/posts/distributed-processing-graph-colouring/</link><pubDate>Sun, 21 Feb 2021 02:57:19 +0000</pubDate><guid>https://mackle.io/posts/distributed-processing-graph-colouring/</guid><description>Introduction Last year I was presented with a rather interesting issue which gave me an opportunity to use some latent mathematics knowledge. This post covers the simplest form of the problem where some of the complexity is removed via constraints. The problem revolves around efficiently processing a data model definiton and can be summarised as follows:
Given an entity-relationship(ER) model with only many-to-many relationships and multiple isolated workers, with each worker having the following properties:</description></item></channel></rss>